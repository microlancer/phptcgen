<?php

namespace Test;

/**
 * PHPUnit test class for Example1
 *
 * Automatically generated by phptcgen version 1.0.0
 */
class Example1Test extends \PHPUnit_Framework_TestCase
{
    /**
     * Test Example1::multiplyByGlobalPi() for when input is x as integer
     */
    public function testMultiplyByGlobalPiTakesXAsInteger()
    {
        // ... Put your test code here ...

        // ... Put your assertions here ...
        $this->assertTrue(false);
        $this->markTestIncomplete();
    }

    /**
     * Test Example1::multiplyByGlobalPi() for when input is x as string
     */
    public function testMultiplyByGlobalPiTakesXAsString()
    {
        // ... Put your test code here ...

        // ... Put your assertions here ...
        $this->assertTrue(false);
        $this->markTestIncomplete();
    }

    /**
     * Test Example1::multiplyByGlobalPi() for when input is x as boolean
     */
    public function testMultiplyByGlobalPiTakesXAsBoolean()
    {
        // ... Put your test code here ...

        // ... Put your assertions here ...
        $this->assertTrue(false);
        $this->markTestIncomplete();
    }

    /**
     * Test Example1::multiplyByGlobalPi() for when input is x as empty array
     */
    public function testMultiplyByGlobalPiTakesXAsEmptyArray()
    {
        // ... Put your test code here ...

        // ... Put your assertions here ...
        $this->assertTrue(false);
        $this->markTestIncomplete();
    }

    /**
     * Test Example1::multiplyByGlobalPi() for when input is x as populated array
     */
    public function testMultiplyByGlobalPiTakesXAsPopulatedArray()
    {
        // ... Put your test code here ...

        // ... Put your assertions here ...
        $this->assertTrue(false);
        $this->markTestIncomplete();
    }

    /**
     * Test Example1::multiplyByGlobalPi() for when input is valid global
     */
    public function testMultiplyByGlobalPiTakesValidGlobal()
    {
        // ... Put your test code here ...

        // ... Put your assertions here ...
        $this->assertTrue(false);
        $this->markTestIncomplete();
    }

    /**
     * Test Example1::multiplyByGlobalPi() for when input is invalid global
     */
    public function testMultiplyByGlobalPiTakesInvalidGlobal()
    {
        // ... Put your test code here ...

        // ... Put your assertions here ...
        $this->assertTrue(false);
        $this->markTestIncomplete();
    }
}
